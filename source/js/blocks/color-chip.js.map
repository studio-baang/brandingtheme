{"mappings":"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","sources":["dev/js/modules/convert-color.js","dev/js/component/color-chip-comp.js","dev/js/blocks/color-chip.js"],"sourcesContent":["function sliceHEX(colorHEX) {\n\treturn {\n\t\tr: colorHEX.slice(1, 3),\n\t\tg: colorHEX.slice(3, 5),\n\t\tb: colorHEX.slice(5, 7),\n\t};\n}\n\nfunction HEXtoRGBrange(colorHEX) {\n\tconst { r, g, b } = HEXtoRGB(colorHEX);\n\treturn {\n\t\tr: r / 255,\n\t\tg: g / 255,\n\t\tb: b / 255,\n\t};\n}\n\nfunction HEXtoRGB(colorHEX) {\n\tconst { r, g, b } = sliceHEX(colorHEX);\n\n\treturn {\n\t\tr: parseInt(r, 16),\n\t\tg: parseInt(g, 16),\n\t\tb: parseInt(b, 16),\n\t};\n}\n\nfunction checkBrightness(colorHEX) {\n\tconst { r, g, b } = HEXtoRGBrange(colorHEX);\n\tconst average = (r + g + b) / 3;\n\treturn average >= 0.6 ? true : false;\n}\n\nfunction RGBtoHEX(RGB) {\n\tconst { r, g, b } = RGB;\n\n\tconst getHexVaule = (number) => {\n\t\tconst numerHex = number.toString(16);\n\t\treturn numerHex.length < 2 ? \"0\" + numerHex : numerHex;\n\t};\n\n\treturn \"#\" + getHexVaule(r) + getHexVaule(g) + getHexVaule(b);\n}\n\nfunction HEXtoCMYK(colorHEX) {\n\tconst { r, g, b } = HEXtoRGBrange(colorHEX);\n\n\tconst calcPercent = (value) => Math.round(value * 100);\n\n\tconst black = 1 - Math.max(r, g, b);\n\tconst calcCMY = (value) => (1 - value - black) / (1 - black) || 0;\n\n\treturn {\n\t\tc: calcPercent(calcCMY(r)),\n\t\tm: calcPercent(calcCMY(g)),\n\t\ty: calcPercent(calcCMY(b)),\n\t\tk: calcPercent(black),\n\t};\n}\n\nfunction createGradientArray(props) {\n\tconst { level, startColor, endColor } = props;\n\tconst colorGroup = [];\n\n\tconst startColorSliceRGB = HEXtoRGB(startColor);\n\tconst endColorSlideRGB = HEXtoRGB(endColor);\n\n\tconst calcGradientRGB = (index) => {\n\t\tconst first = startColorSliceRGB;\n\t\tconst last = endColorSlideRGB;\n\n\t\tconst calcValue = (firstValue, lastValue) =>\n\t\t\tMath.round(firstValue + (index / level) * (lastValue - firstValue));\n\n\t\treturn {\n\t\t\tr: calcValue(first.r, last.r),\n\t\t\tg: calcValue(first.g, last.g),\n\t\t\tb: calcValue(first.b, last.b),\n\t\t};\n\t};\n\n\tcolorGroup.push(startColor);\n\n\tif (level > 0) {\n\t\tconst limitLevel = Math.max(Math.min(level, 10), 1);\n\t\tfor (let i = 1; i < limitLevel; i++) {\n\t\t\tcolorGroup.push(RGBtoHEX(calcGradientRGB(i)));\n\t\t}\n\t\tcolorGroup.push(endColor);\n\t}\n\n\treturn colorGroup;\n}\n\nexport { checkBrightness, HEXtoRGB, HEXtoCMYK, createGradientArray };\n","import { checkBrightness, HEXtoRGB, HEXtoCMYK } from \"../modules/convert-color\";\n\nconst el = wp.element.createElement;\nconst components = window.wp.components;\n\nfunction ChipTitle(props) {\n\tconst name = props.name;\n\treturn name != null\n\t\t? el(\"h2\", { class: \"color-chip__title\" }, `${name}`)\n\t\t: \"\";\n}\n\nfunction ChipDataList(props) {\n\tconst hex = props.color;\n\n\tconst { r, g, b } = HEXtoRGB(hex);\n\tconst { c, m, y, k } = HEXtoCMYK(hex);\n\n\treturn el(\n\t\t\"dl\",\n\t\t{ class: \"color-chip__list\" },\n\t\tel(\"dt\", { class: \"color-chip__type\" }, \"HEX\"),\n\t\tel(\"dd\", { class: \"color-chip__value\" }, `${hex}`),\n\t\tel(\"dt\", { class: \"color-chip__type\" }, \"RGB\"),\n\t\tel(\"dd\", { class: \"color-chip__value\" }, `${r} ${g} ${b}`),\n\t\tel(\"dt\", { class: \"color-chip__type\" }, \"CMYK\"),\n\t\tel(\"dd\", { class: \"color-chip__value\" }, `${c}% ${m}% ${y}% ${k}%`)\n\t);\n}\n\nexport function EditColorChip(props) {\n\tconst {\n\t\tattributes: { name, color },\n\t\tsetAttributes,\n\t} = props;\n\n\tconst editName = (event) => {\n\t\tsetAttributes({ name: event.target.value });\n\t};\n\n\tconst editColor = (val) => {\n\t\tsetAttributes({ color: val });\n\t};\n\n\treturn el(\n\t\t\"div\",\n\t\t{ className: \"edit-color-chip\" },\n\t\tel(\"input\", {\n\t\t\ttype: \"text\",\n\t\t\tvalue: name,\n\t\t\tonChange: editName,\n\t\t\tplaceholder: \"칩 이름을 기입하세요\",\n\t\t}),\n\t\tel(components.ColorPicker, {\n\t\t\tcopyFormat: \"hex\",\n\t\t\tcolor: color,\n\t\t\tonChange: editColor,\n\t\t})\n\t);\n}\n\nexport function ColorChip(props) {\n\tconst { name, color } = props.attributes;\n\n\tconst styled = {\n\t\tbackgroundColor: `${color}`,\n\t\tcolor: !checkBrightness(color) ? \"#ffffff\" : \"#000000\",\n\t};\n\n\treturn el(\n\t\t\"div\",\n\t\t{ class: \"color-chip\", style: styled },\n\t\tel(ChipTitle, { name }),\n\t\tel(ChipDataList, { color })\n\t);\n}\n","import { ColorChip, EditColorChip } from \"../component/color-chip-comp\";\n\n(function (blocks) {\n\tconst registerBlockType = blocks.registerBlockType;\n\n\tregisterBlockType(\"studio-baang/color-chip\", {\n\t\tapiVersion: 2,\n\t\ttitle: \"컬러 칩\",\n\t\tcategory: \"design\",\n\t\ticon: \"lightbulb\",\n\t\tparent: [\"studio-baang/color-list\"],\n\t\tdescription:\n\t\t\t\"브랜드 컬러 칩을 생성합니다. hex값을 선택하면 자동으로 rgb, cmyk값을 반환합니다.\",\n\n\t\tattributes: {\n\t\t\tname: {\n\t\t\t\ttype: \"string\",\n\t\t\t},\n\t\t\tcolor: {\n\t\t\t\ttype: \"string\",\n\t\t\t\tdefault: \"#ffffff\",\n\t\t\t},\n\t\t},\n\n\t\tedit: EditColorChip,\n\n\t\tsave: ColorChip,\n\t});\n})(window.wp.blocks);\n"],"names":["$db72cf66051b9ac1$var$HEXtoRGBrange","colorHEX","r","g","b","$db72cf66051b9ac1$export$e1ee88b022ef5327","slice","$db72cf66051b9ac1$var$sliceHEX","parseInt","$db72cf66051b9ac1$export$6db3d78ff882ad7e","$db72cf66051b9ac1$export$e2796f86add8d121","calcPercent","value","Math","round","black","max","calcCMY","c","m","y","k","$f317446863c0510f$var$el","wp","element","createElement","$f317446863c0510f$var$components","window","components","$f317446863c0510f$var$ChipTitle","props","name","class","$f317446863c0510f$var$ChipDataList","hex","color","$f317446863c0510f$export$ba5efe0aaccae212","attributes","setAttributes","className","type","onChange","event","target","placeholder","ColorPicker","copyFormat","val","$f317446863c0510f$export$43e54f70144d08dc","styled","backgroundColor","style","registerBlockType","blocks","apiVersion","title","category","icon","parent","description","default","edit","save"],"version":3,"file":"color-chip.js.map"}